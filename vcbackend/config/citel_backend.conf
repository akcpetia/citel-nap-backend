server_tokens               off;
access_log                  /var/log/nginx/citel_backend.access.log;
error_log                   /var/log/nginx/citel_backend.error.log;

upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    server 127.0.0.1:8080 fail_timeout=0;

# This configuration will be changed to redirect to HTTPS later
server {
    server_name      _ backend.cnis.io;
    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        autoindex on;
        alias /var/www/static;
        proxy_set_header        Host $host;
    }
    location / {
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host; #$http_host or $host?
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://app_server;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/backend.cnis.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/backend.cnis.io/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}




server {
    if ($host = backend.cnis.io) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name      _ backend.cnis.io;
    listen                    80;
    add_header Access-Control-Allow-Origin *;
    location = /favicon.ico { access_log off; log_not_found off; }
    location / {
        try_files $uri @proxy_to_app;
    }
    location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host; #$http_host or $host?
        proxy_redirect off;
        proxy_pass http://app_server;
    }


}
